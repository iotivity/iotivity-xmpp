diff --git rapidxml_print.hpp rapidxml_print.hpp
index a80a9cf..c7ab8a9 100644
--- rapidxml_print.hpp
+++ rapidxml_print.hpp
@@ -22,6 +22,9 @@ namespace rapidxml
 
     const int print_no_indenting = 0x1;   //!< Printer flag instructing the printer to suppress indenting of XML. See print() function.
 
+    // 2015/03/23 -- Intel CCF
+    const int print_no_ending = 0x1000;   //!< Printer flag instructing the printer to suppress closing the root tag
+
     ///////////////////////////////////////////////////////////////////////
     // Internal
 
@@ -279,13 +282,16 @@ namespace rapidxml
                 out = fill_chars(out, indent, Ch('\t'));
             *out = Ch('<'), ++out;
             out = copy_chars(node->name(), node->name() + node->name_size(), out);
-            out = print_attributes(out, node, flags);
+            out = print_attributes(out, node, flags & ~print_no_ending);
             
             // If node is childless
             if (node->value_size() == 0 && !node->first_node())
             {
-                // Print childless node tag ending
-                *out = Ch('/'), ++out;
+                if (!(flags & print_no_ending))
+                {
+                    // Print childless node tag ending
+                    *out = Ch('/'), ++out;
+                }
                 *out = Ch('>'), ++out;
             }
             else
@@ -310,16 +316,19 @@ namespace rapidxml
                     // Print all children with full indenting
                     if (!(flags & print_no_indenting))
                         *out = Ch('\n'), ++out;
-                    out = print_children(out, node, flags, indent + 1);
+                    out = print_children(out, node, flags & ~print_no_ending, indent + 1);
                     if (!(flags & print_no_indenting))
                         out = fill_chars(out, indent, Ch('\t'));
                 }
 
                 // Print node end
-                *out = Ch('<'), ++out;
-                *out = Ch('/'), ++out;
-                out = copy_chars(node->name(), node->name() + node->name_size(), out);
-                *out = Ch('>'), ++out;
+                if (!(flags & print_no_ending))
+                {
+                    *out = Ch('<'), ++out;
+                    *out = Ch('/'), ++out;
+                    out = copy_chars(node->name(), node->name() + node->name_size(), out);
+                    *out = Ch('>'), ++out;
+                }
             }
             return out;
         }
